HECHO---->TODOS LOS PUNTOS HECHOS
PENDIENTE--->QUEDA POR HACER
REVISAR---->Mirar un poco
MODIFICAR---->Es recomendable cambiarlo
#####################################
Instalado:
-> git: sudo apt install git
-> docker: sudo apt install docker.io
-> iptables: sudo apt install iptables
-> python3 instalado 
#####################################
CASOS DE USO:
1.	Registrar jugador (Opcional: Iniciar sesion con google), PENDIENTE iniciar sesión con google
2.	Iniciar sesión: HECHO
3.	Verificar inició de sesión con correo electronico: HECHO
4.	Recuperar contraseña: HECHO
5.	Cerrar sesión: HECHO
6.	Ver perfil del jugador -> HECHO: Ver los jugadores y por tanto poder ver puntuación, foto de perfil y maquinas reventadas
7.	Modificar contraseña: HECHO
8.	Modificar perfil PENDIENTE: Poder cambiar el correo electronico con su correspondiente verificación
9.	Descargar VPN (Para la conexión directa entre jugador y maquina vulnerable)
10.	Obtener instrucciónes de conexión PENDIENTE->HECHO
11.	Arrancar maquina vulnerable: HECHO
12.	Detener maquina vulnerable: HECHO
13.	Verificar bandera del usuario vulnerado (El jugador obtendrá una puntuación en función del nivel de dificultad de la maquina) HECHO
14.	Verificar banera del adminstrador vulnerado: HECHO
15.	Mostrar ranking de jugadores por puntuación HECHO
16.	Mostrar máquinas disponibles HECHO
17.	Notificar/Informar error del sistema: Desde el panel principal PENDIENTE
18.	Valorar maquina vulnerada: Luego en cada maquina poner la media de la valoración y el total de votos hechos PENDIENTE->Se ha mirado como hacer el front
19.	Filtrar maquinas (dificultad, nombre…) HECHO-> No se busca por maquina
Administrador
20.	Añadir nueva maquina: Panel de administrador-> HECHO, MODIFICAR: Añadir una ruta para no acceder a la administracion por defecto
21.	Editar características de la maquina (nombre, nivel…)-> MODIFICAR: De momento se puede hacer desde el panel de administracion
22.	Eliminar usuario
23.	Concecer rol de administrador
-> Datos importantes de la base de datos:
	- Si se crea un User se crea un Jugador y su usuario correspondiente en VPN con su fichero .ovpn: HECHO
	- Si se crea una MaquinaVulnerable:MaquinaDocker,MaquinaDockerCompose,MaquinaVirtual(Nunca MaquinaVulnerable, será una de las otras 3),
		se crean tuplas MaquinaJugador de todos aquellos jugadores que tengan puntuacion>=puntuacion_minima_activacion: HECHO
	- Si se elimina el Usuario se elimina tanto las relaciones como el Jugador como las relaciones MaquinaJugador y debería sus puntuaciones.
	- Cuando un jugador obtiene puntuación se recalcula la tabla MaquinaJugador para añadir maquinas disponibles que puede tener nuevas
#####################################
->API de fotos sin copyRight: https://www.freepik.es/fotos-vectores-gratis/informatica
->Carpeta static y templates establecida para los ficheros HTMLS, CSS, JS e imágenes
->Creada una aplicación "gestion" dentro del poryecto la cual gestiona todos los usuarios
->Establecida la DB "en pañales" desde el fichero "models.py" de gestion (creado)
->Para tener acceso desde otro ordenador he modificado la macro ALLOWED_HOSTS = ["192.168.1.25"] de settings.py
->Crear un sistema de registro de usuarios HECHO (REVISAR)
->Crear el sistema de login de un usuarios HECHO (REVISAR)
	-Que te de la bienvendia con todos los datos (Mirar si es mejor arrastrar el usuario por defecto de Django o el perfil creado por nosotros): HECHO (REVISAR bien)
		+Se hace mediantes un forms.py min 23:58 https://www.youtube.com/watch?v=06aDhOwqvfY&t=2004s
	-Que se gestione la sesion: https://developer.mozilla.org/es/docs/Learn/Server-side/Django/Sessions HECHO (Se hace mediante login_required)
	-Que tenga establecido un tiempo de session https://es.stackoverflow.com/questions/433071/c%C3%B3mo-puedo-controlar-el-tiempo-de-sesi%C3%B3n-del-usuario PENDIENTE (Echar un ojo, se ha creado una macro llamada SESSION_COOKIE_AGE en settings)
->Crear un logout de la sesion HECHO
->Cuando se intente acceder a un recurso sin usuario identificado-> redirect a la pagina principal HECHO (REVISAR->Poner el decorator en cada función que no se quiera tener acceso)
------
->Crear botones para levantar una maquina con doker y tener acceso a ella:
	+Controlar que un usuario pueda darle una sola vez al boton (HECHO)
	+Para cada usuario tengo que crear un contenedor individual con conectividad directa a dicho contenedor para que pueda vulnerar la maquina
->Mirar el formulario del indice para que cuando se dé a submit se mande un correo al administrador para cualquier incidencia
->Investigar Docker de caracter urgente
-----12-11-2023---------
->Para poder generar una imagen del modelo de datos (Base de Datos):
	+ Instalar: pip install django-extensions
	+ sudo pip install pydotplus && (REVISAR No esta instalado)pip install pygraphviz && apt-get install graphviz
	+ python3 manage.py graph_models -a -g -o my_models.png
->Levantar una maquina tiene una ruta /my/maquinas/nombreMaquina/activar o desactivar lo mejor es que la variable activar o desactivar vaya como un parámetro en POST: HECHO
->Levantar y detener una maquina sin linea de comandos con la API de docker PENDIENTE -> No funciona: se ha hecho con subprocess
->Establecer un enlace a la pagina oficial de fciencias
--------------
Script de importacón de una nueva maquinas vulnerable (PENDIENTE)
-----24-11-2023---------
Añadido el parametro LOGGIN para el registro de peticiones
-----14-02-2024---------
Para las traducciones del ingles al español:
-> Añadir al setting.py: USE_I18N = True
-> instalar: # sudo apt-get install gettext
-> crear una carpeta "locale" dentro de la aplicación
-> Ejecutar: # python manage.py makemessages -l es
	Esto creará archivos .po en el directorio locale/es/LC_MESSAGES/. Abre el archivo correspondiente (django.po)
->Editar el fichero poniendo: 	msgid "The two password fields didn't match."
				msgstr "Las dos contraseñas no coinciden."
-> Guardar con: # python manage.py compilemessages
==> No funciona mirar errores (PENDIENTE->Opcional el idioma)
-----15-02-2024---------
-Para usar un servidor web usar guicon para ello instalarlo:# apt install gunicorn
-Añadir en la aplicacion principal del proyecto el fichero wsgi.py
- Para ejecutar y que funcione todo pero no es seguro: python3 manage.py runserver --insecure
-----16-02-2024---------
-Probandolo en el servidor de apache
-> instalo el modulo wsgi: # sudo apt install libapache2-mod-wsgi
	-> si no funciona: # sudo apt-get install libapache2-mod-wsgi-py3
-> lo activo: # sudo a2enmod wsgi
-Creo un fichero en la ruta:/etc/apache2/sites-available/marpaga.conf
	====================
	<VirtualHost *:80>
	    ServerName tu_domino.com
	    DocumentRoot /home/marco/Escritorio/TFG/marpaga_tfg

	    WSGIDaemonProcess marpaga_env python-home=/home/marco/Escritorio/TFG/virtual
	    WSGIProcessGroup marpaga_tfg
	    WSGIScriptAlias / /home/marco/Escritorio/TFG/marpaga_tfg/marpaga/wsgi.py

	    <Directory /home/marco/Escritorio/TFG/marpaga_tfg/marpaga>
		<Files wsgi.py>
		    Require all granted
		</Files>
	    </Directory>

	    Alias /static/ /home/marco/Escritorio/TFG/marpaga_tfg/gestion/
	    <Directory /home/marco/Escritorio/TFG/marpaga_tfg/gestion>
		Require all granted
	    </Directory>

	    #ErrorLog ${APACHE_LOG_DIR}/error.log
	    #CustomLog ${APACHE_LOG_DIR}/access.log combined
	     ErrorLog /home/marco/Escritorio/marpaga_error.log
	     CustomLog /home/marco/Escritorio/marpaga_access.log combined
	</VirtualHost>
	====================
--> ¡Para que funcione todo correctamente hay que mirar bien los permisos! (Pendiente de hacer->FUNCIONA con producciontfg)-> HECHO con el script auto.sh ejecutado desde la .bashrc "producciontfg comando"
	-----16-02-2024---------
	- Se han gestionado los botones de activación/desactivación de los usuario en redes y contenedores diferentes
	- Mostrar la ip al activar la maquina
	HECHO de hacer:
	1. Gestionar levantar un docker compose al darle al boton de activar en una red y usuario diferentes (HECHO) REVISAR-> Usar la api docker-compose en vez de una llamada del sistema
	2. Gestionar levantar un docker compose al darle al boton de desactivar en una red y usuario diferentes (HECHO) REVISAR-> Usar la api docker-compose en vez de una llamada del sistema
	3. Que aparezca la ip al lado cuando esté levantado el contenedor (HECHO)
	4 Verificar de manera correcta la estructura de:  (PENDIENTE)
		4.1 Carpeta docker-compose
		4.2 Imagenes docker
		4.3 La estructura de las maquinas virtuales que sea por lo menos una maquina virtual (.ova)
	5. Añadir las flags a las maquinas vulnerables
	6. Usar una plantilla con {% extends 'base.html' %} para usar solo la base
	7.. Generar un Script que se encargue de gestionar la iptables para segmentar la red entre usuarios y el sistema
	-----17-02-2024---------
	-> Poner foto de perfil del usuario:
		a. Que sea accesible unicamente por el usuario su foto
		b. O poner la ruta encriptada y con nombre auxiliar
	-> Se ha cambiado la maquina startrek_payroll para que funcione correctamente cuando se levanta, hay que gestionar la segmentación de red para que sea accesible
		desde la conexón con la VPN (configuración de ip tables)
		-> Información de documentación iptables:
			1. Obtener la ip del cliente: Fichero->sudo cat /var/log/openvpn/status.log tambien esta en /etc/openvpn/ipp.txt
			2. Reglas:
				¡IMPORTANTE!
				====================
				# Bloquear tráfico desde el rango 10.8.0.0/24
				sudo iptables -A FORWARD -s 10.8.0.0/24 -d 172.18.0.4 -j DROP
				# Permitir tráfico desde la IP específica 10.8.0.3
				sudo iptables -A FORWARD -s 10.8.0.3 -d 172.18.0.4 -j ACCEPT
				====================
				APUNTE: Para eliminar una regla: # sudo iptables -D FORWARD 23
			3. Para evitar conectividad entre los usuarios:
	-----20-02-2024---------
	Ahora que estan la iptables configuradas, guardarlas en un fichero justo antes de apagar el sistema para que cuando se encienda puedan volverse a ejecutar y estar todo como establecida
	-> Empezar a meter flags a las imágenes de docker compose y GENERALIZAR más; es decir, obtener otro docker-compose vulnerable y poder levantar uno y otro (PENDIENTE)
	-> Ver si funciona para otros sistemas (PENDIENTE)
	-> Crear un fichero ovpn cuando se registre el usuario en el sistema
	-----22-02-2024---------
REVISAR
-> Modificar la base de datos para que cuando se levante una maquina cambiar activa: FALSE->TRUE tanto en el servidor como en el panel de administracion ocurra lo mismo; esto se hace gestionando todo desde el modelo de datos con un evento. Se tendra en cuenta:
1.levantar la maquina desde linea de comandos; 
2. indicar la ip de la maquina, 
3.establecer las reglas iptables. Rama main
	-----23-02-2024---------
-> Se ha modificado el fichero /etc/sudoers para que el usuario marco pueda ejecutar iptables sin contraseña:
	- Se ha comentado la linea: #%sudo  ALL=(ALL:ALL) ALL
	- Se ha añadido la linea: marco ALL=(ALL:ALL) NOPASSWD:/usr/sbin/iptables, /home/marco/Escritorio/TFG/marpaga_tfg/iptables.sh 
	=>MODIFICAR: Cambiar la ruta donde se encuentra el archivo iptables.sh y el futuro Script para crear usuarios vpn
	-----24-02-2024---------
-> Haciendo script automatización creación de usuario.ovpn, (prueba: micieces, marpagaadmin)
-> Añado en el /etc/sudoers el script para añadir y eliminar clientes vpn al crear un usuario: 
	# marco ALL=(ALL:ALL) NOPASSWD:/usr/sbin/iptables, /home/marco/Escritorio/TFG/marpaga_tfg/iptables.sh, /home/marco/Escritorio/TFG/marpaga_tfg/createUserVPN.sh
	-----25-02-2024---------
-> Haciendo un tunel para poder ver un puerto de mi servidor remoto en el local
	ssh -L 4000:prodiasv18.fis.usal.es:80 -N i1100160@nogal.usal.es
-> Para pasar datos de mi servidor local a mi servidor remoto:
	# scp -o ProxyJump=i1100160@nogal.usal.es -r /home/marco/Escritorio/TFG/marpaga_tfg/ marco@prodiasv18.fis.usal.es:/home/marco/TFG/
-----26-02-2024---------
-> Caso de uso Modificar Constaseña
-> Caso de uso Validar cuenta de usuario:
	+ Creamos un correo electronico:
		marpagamarco@gmail.com -> marpagaadmin2001
	+ Añadimos en los settings:
		EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
		EMAIL_HOST = 'smtp.gmail.com'
		EMAIL_PORT = 587
		EMAIL_USE_TLS = True
		EMAIL_HOST_USER = 'marpagamarco@gmail.com'
		EMAIL_HOST_PASSWORD = 'wpqdzopxecragcyq'
		EMAIL_USE_TLS = True
	+ Tambien los imports correspondientes
	-> Cuando un usuario se registra pero no activa la cuenta durante X tiempo eliminarla (se ha creado managements/commands): HECHO
	-> Modificar el html account_activation_email.html
-> Caso de uso contraseña olvidada: PENDIENTEE->MODIFICAR su estetica esta a medio hacer->HECHO
-----27-02-2024---------
-> Implementar crontab para eliminar los usuarios que no tengan la cuneta activada:
	Opcion 1:
	- Instalo la tarea cron:
		# pip install django-cron
	- Creo el archivo marpaga/cron.py
	- Migro los datos:
		# python3 manage.py migrate django_cron
	- Registro las tareas cron: 
		# python3 manage.py runcrons
	Conclusion: Funciona pero no se ejecuta a la vez por lo tanto se va a usar celery:
	Opcion 2:
	- Instalo celery:
		# pip install celery[redis]
	- Creo un archivo aplicacion_principal/celery.py (No adjunto el conteneido)
	- Instalar en el servidor todo:
		# apt install redis-server
	- Ejecuto los comandos: 
		# celery -A marpaga beat --loglevel=info
		# celery -A marpaga worker --loglevel=info
	Elimino todo: 
		# apt-get remove --purge redis-server -y && apt-get autoremove -y && rm -r /etc/redis && rm -r /var/log/redis && sudo rm -r /var/lib/redis
		Tambien los ficheros tasks.py
	Opcion 3:
	- Finalmente cuando se completa el formulario se crea un hilo que después de 1 minuto se ejecute la eliminación de los usuarios con la cuenta inactiva.
-----28-02-2024---------
-> Mirando como alojar todo en el servidor Apache o Nginx 
	- Lo primero agrupamos todos los ficheros estáticos
	# python3 manage.py collectstatic
	- Obviamente hemos cambiado la variable DEBUG=Flase y STATIC_URL = '/static/'
	- Configuramos el servidor:
	Opcion 1:
	- Instalo gunicorn:
		# pip install gunicorn
	- Se crea un archivo wsgi.py en la misma ruta que manage.py:
		###########
		import os
		from django.core.wsgi import get_wsgi_application
		os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'marpaga.settings')
		application = get_wsgi_application()
		###########
	- Ejecutar gunicorn:
		# gunicorn wsgi -w 4 -b 0.0.0.0:8000
	- Creo un servicio para que corra automáticamente nada más arrancar el ordenador "marpaga_gunicorn.service":
		###########
		[Unit]
		Description=Levanta el servidor de Marpaga una vez se inicie el ordenador
		After=network.target

		[Service]
		User=marco   # Reemplaza con el nombre de tu usuario
		Group=marco    # Reemplaza con el nombre de tu grupo
		WorkingDirectory=/home/marco/Escritorio/TFG/marpaga_tfg
		ExecStart=/home/marco/Escritorio/TFG/virtual/bin/gunicorn wsgi -b 0.0.0.0:8000 -w 4
		Restart=always

		[Install]
		WantedBy=multi-user.target
		###########
	- Lo meto en la ruta: /etc/systemd/system/
		# cp marpaga_gunicorn.service /etc/systemd/system/
	- Reinicio el servicio: 
		# systemctl daemon-reload
	- Activo el servicio:
		# systemctl enable marpaga_gunicorn
	- Bien ahora instalamos Nginx:
	 # apt install nginx
	- Creamos el fichero de configuracion en: /etc/nginx/sites-available/marpaga
		###########
		# /etc/nginx/sites-available/marpaga
		server {
			listen 80;
			server_name marpaga.hopto.org 83.55.64.220;

			location = /favicon.ico { access_log off; log_not_found off; }
			location /static/ {
				root /home/marco/Escritorio/TFG/marpaga_tfg; # Cambiar la ruta a la correspondiente
			}

			location / {
				include proxy_params;
				proxy_pass http://127.0.0.1:8000;
			}
		}
		###########
	- Creamos un enlace simbólico a la ruta /etc/nginx/sites-enables/marpaga
	# sudo ln -s /etc/nginx/sites-available/marpaga /etc/nginx/sites-enabled

	-A los ficheros estáticos le damos permisos:
	# chown -R www-data:www-data /home/marco/Escritorio/TFG/marpaga_tfg/static
	FUNCIONA:
	-> He pasado todo el proyecto a la carpeta: /var/www/html/marpaga_tfg y la he dado todos los permisos tanto a la ruta del proyecto como al entorno virtual.
	¡Con esto esta funcionando el servidor para pasarlo a producción!
	Apuntes Importantes:
	-> Los ficheros estaticos: css, js,... son cargados por el servidor nginx
	-> Toda la parte del backend se ejecuta como el usuario que este establecido en el servicio de gunicorn
	-> HECHO establecer certificado ssl y que sea una dirección https
-----29-02-2024---------
-> Estableciendo certificado ssl
	Opcion 1: 
	1. Instalar certbot
	# apt-get install certbot
	2. Instalar el plugin:
	# apt-get install python3-certbot-nginx
	3. Crear lo ficheros:
	# certbot certonly --nginx -d tu_dominio.com
	4. Añadir en setting.py la siguientes lineas:
	# SECURE_SSL_REDIRECT = True
	# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') # No sé si es necesario
	5. Editar el fichero de nginx
	# Se han probado varias formas pero no funciona no sé que pasa
	6. Añadir el usuario www-data a docker:
	# usermod -aG docker www-data (PENDIENTE-REVISAR)
	FUNCIONA!! -> IMPORTANTE: Tener los puertos del router abiertos: 80 y 443, modificar el fichero /etc/sudoers o poner la ruta absoluta pero ya funciona
	-> Es importante que el usuario que ejecuta gunicorn pueda hacer todo

-----03-03-2024---------
COSAS QUE HACER:
Hacer casos de uso:
- Juntar los html en un html "basic_template.html"-> Se ha hecho una parte pero hay que completar más información y completar más información
- Verificar flag de maquina user-> hecho solo para la maquina startrek_payroll PENDIENTE
- Verificar flag de maquina admin-> hecho solo para la maquina startrek_payroll PENDIENTE
- Crear tabla en la DB para almacenar las puntuaciones y valoraciones HACER
- Crear un apartado privado para el usuario administrador el cual: HACER
	- Pueda ver todos los usuarios registrados y sus datos HACER
	- Crear, eliminar, modificar maquinas HACER
	- Ver los mensajes de incidencias creados por los usuarios (HECHO-> PENDIENTE de hacer la plantilla html)

-----05-03-2024---------
- Se han controlado los fichero estáticos, en desarrollo estan en el directorio (gestion/static) y en desarrollo en (static) directamente
- Se han cambiado la base de datos, y el html del perfil para crear formularios para cambiar los datos personales de cada usuario.
- ¡IMPORTANTE! No funciona que cuando un usuario actualiza su foto no se guarda por su nombre de usuario
-> Cuando es el mismo nombre se modifica pero no establece el nombreUsuario.jpg importante de REVISAR
-> COSAS QUE HACER:
	- Añadir la modificación de datos personales-> PENDIENTE NO SE PUEDE MODIFICAR EL CORREO ELECTRÓNICO modificar correo electronico con verificación anterior HACER
	- Después añadir una nueva maquina "docker-lab" que es un DPT-> funciona pero cada dockerfile es un mundo y hay que ver cómo se puede automatizar todo
	--> Hay que añadir las banderas para demostrar que se ha vulnerado correctamente
	- Buscar y añadir un Docker-compose y adaptar el codigo para que funcione PENDIENTE
-----05-03-2024---------
-> Gestionando la automatización de levantar maquinas docker y docker-compose:
	=> Para docker:
		- Probar con el lab xxe y el docker-lab (serán dos maquinas una es un DPT y el otro explotas el DPT junto con un RCE) HECHO
	=> Para compose:
		- Probar algún docker-compose más PENDIENTE
	Explicación importación:
		Docker:
			1. Se importa el zip con la carpeta y todo su contenido en la ruta media/archivoZipDocker/
			2. Se descomprime el archivo y se mete la carpeta a la ruta maquinas_docker/
			3. Se crea la imagen de la maquina en el sistema "docker build"
			-> Gestionar las flags dentro de la ruta "maquinas_docker/MAQUINA" para editar el fichero flags.txt y el Dockerfile
			Gestion de errores:
			- Si la estructura del .zip no es buena, no se crea y se elimina el .zip pero no lo que se ha descomprimido
		Compose:
			1. Se importa el zip con la carpeta y todo su contenido en la ruta media/archivoZipDockerCompose/
			2. Se descomprime el archivo y se mete la carpeta a la ruta maquinas_docker_compose/
			3. Las imagenes en docker como son varios servicios se crearán al iniciar el docker-compose el usuario
	Explicación eliminación:
		Docker:
			1. Se elimina el archivo .zip de la ruta media/archivoZipDocker/
			2. Se elimina la carpeta entera de la ruta maquinas_docker/
			3. Se elimina la imagen de la maquina del sistema
-> Arreglando los html de login y signup
-> Comenzar a gestionar la puntuación

-----09-03-2024---------
Infinitos problemas con la base de datos y el servidor VPN:
	- Cambiar en iptables.sh la manera de obtener la ip del usuario usar el archivo: /var/log/openvpn/status.log mejor funcionalidad 
		además de eso hay veces que la vpn no gestiona bien el enrrutamiento de la red PENDIENTE
	- Funciona cuando un usuario introduce la flag luego ya no puede introducir otra vez la flag:
		-> queda sumarle los puntos al usuario y habilitar más maquinas cuando un usuario sube de nivel-> Se ha creado una función en el jugador
	- Se ha cambiado toda la estructura a la hora de levantar los contenedores, funciones indepentientes dentro de cada Objeto
	-> Queda calcular la puntuación y hacer el punto dos (2) de este día PENDIENTE
-----10-03-2024---------
	- Se gestiona que el usuario no pueda volver a introducir la flag dos veces y ya obtiene la puntuación y la guarda en la base de datos
	- Ver cuando se crea un nuevo usuario y navegas para levantar una maquina muestra un cuadro de dialogo REVISAR
	- Pendiente de hacer el proximo día:
		1. Crear una vista para mostrar el ranking de los mejores jugadores con sus respectivas puntuaciones HECHO
		2. Filtrar maquinas por dificultad (JavaScript): HECHO
		3. Poder ver el perfil de otros jugadores PENDIENTE: Poner la puntuación que tiene cada jugador en su perfil
			y ver un listado ordenado con un scrollbar de las maquinas: HECHO, PENDIENTE: Mejorar el listado:
				- Cambiar el scrollbar
				- Poner una tabla en la que ponga: Maquina-puntuacion-fecha
-----17-03-2024---------
Para el proximo día hacer:
	- Notificar/Informar error del sistema(CU-17): Esto es desde el panel de administracion PENDIENTE
	- Valorar maquina vulnerada(CU 18): Añadir a la bd una tabla para las valoraciones de las maquinas y sobre todo el html y css con estrellas para valorar la maquina PENDIENTE

- Acabo de llegar a mi pueblo por lo que la ip publica de salamanca es: 83.55.56.178
- La ip publica del router de mi pueblo: 

-----16-04-2024---------
Se ha dejado PENDIENTE lo del anterior dia.
Se modifica la client-template.txt: /etc/openvpn/client-template.txt para poner: remote marpaga.hopto.org 1194
-----17-04-2024---------
Se ha muestra el listado de maquinas vulneradas de los usuarios PENDIENTE hacer que se muestre el listado de logros conseguidos de cada usuario personalmente
Cuadro modal para explicación de conexión VPN de un usuario
Mejora de codigo para comprobar cuando un usuario esta conectado a la vpn: ficheros importantes-> /var/log/openvpn/status.log y /etc/openvpn/ipp.txt,
	 función jugador_conectado_vpn de models.py se encarga de controlarlo.
Se ha empezado a hacer las estrellas para las valoraciones de las máquinas para que el usuario pueda valorar

-----18-04-2024---------
Cosas que hacer:
1. Mostrar el listado de logros conseguidos por uno mismo
2. Añadir a la base de datos que un usuario pueda valorar las maquinas (crear la base de datos correspondiente para almacenar las votaciones)
3. Ver como hacer los gráficos del panel de admin:
	3.1 Un gráfico que muestre las votaciones de cada máquina en relación a las estrellas-> cada maquina: eje x estrellas eje y nº de personas
	3.2 Conseguir el tiempo que tarda cada usuario en reventar una maquina -> eje x dificultad y eje y mediaTiempoJugadoresTotales*tiempoTotal/100 poner un filtro para flag 1 y flag 2
4. Conseguir automatizar más docker-compose