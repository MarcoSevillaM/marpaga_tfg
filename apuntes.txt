HECHO---->TODOS LOS PUNTOS HECHOS
PENDIENTE--->QUEDA POR HACER
REVISAR---->Mirar un poco
MODIFICAR---->Es recomendable cambiarlo
#####################################
Instalado:
-> git: 
-> docker: sudo apt install docker.io
-> iptables: 
-> python3 instalado 
#####################################
->Fotos sin copyRight: https://www.freepik.es/fotos-vectores-gratis/informatica
->Carpeta static y templates establecida para los ficheros HTMLS, CSS, JS e imágenes
->Creada una aplicación "gestion" dentro del poryecto la cual gestiona todos los usuarios
->Establecida la DB "en pañales" desde el fichero "models.py" de gestion (creado)
->Para tener acceso desde otro ordenador he modificado la macro ALLOWED_HOSTS = ["192.168.1.25"] de settings.py
->Crear un sistema de registro de usuarios HECHO (REVISAR)
->Crear el sistema de login de un usuarios HECHO (REVISAR)
	-Que te de la bienvendia con todos los datos (Mirar si es mejor arrastrar el usuario por defecto de Django o el perfil creado por nosotros): HECHO (REVISAR bien)
		+Se hace mediantes un forms.py min 23:58 https://www.youtube.com/watch?v=06aDhOwqvfY&t=2004s
	-Que se gestione la sesion: https://developer.mozilla.org/es/docs/Learn/Server-side/Django/Sessions HECHO (Se hace mediante login_required)
	-Que tenga establecido un tiempo de session https://es.stackoverflow.com/questions/433071/c%C3%B3mo-puedo-controlar-el-tiempo-de-sesi%C3%B3n-del-usuario PENDIENTE (Echar un ojo, se ha creado una macro llamada SESSION_COOKIE_AGE en settings)
->Crear un logout de la sesion HECHO
->Cuando se intente acceder a un recurso sin usuario identificado-> redirect a la pagina principal HECHO (REVISAR->Poner el decorator en cada función que no se quiera tener acceso)
------
->Crear botones para levantar una maquina con doker y tener acceso a ella:
	+Controlar que un usuario pueda darle una sola vez al boton (HECHO)
	+Para cada usuario tengo que crear un contenedor individual con conectividad directa a dicho contenedor para que pueda vulnerar la maquina
->Mirar el formulario del indice para que cuando se dé a submit se mande un correo al administrador para cualquier incidencia
->Investigar Docker de caracter urgente
-----12-11-2023---------
->Para poder generar una imagen del modelo de datos (Base de Datos):
	+ Instalar: pip install django-extensions
	+ sudo pip install pydotplus && (REVISAR No esta instalado)pip install pygraphviz && apt-get install graphviz
	+ python3 manage.py graph_models -a -g -o my_models.png
->Levantar una maquina tiene una ruta /my/maquinas/nombreMaquina/activar o desactivar lo mejor es que la variable activar o desactivar vaya como un parámetro en POST: HECHO
->Levantar y detener una maquina sin linea de comandos con la API de docker PENDIENTE
->Establecer un enlace a la pagina oficial de fciencias
--------------
Script de importacón de una nueva maquinas vulnerable (PENDIENTE)
-----24-11-2023---------
Añadido el parametro LOGGIN para el registro de peticiones
-----14-02-2024---------
Para las traducciones del ingles al español:
-> Añadir al setting.py: USE_I18N = True
-> instalar: # sudo apt-get install gettext
-> crear una carpeta "locale" dentro de la aplicación
-> Ejecutar: # python manage.py makemessages -l es
	Esto creará archivos .po en el directorio locale/es/LC_MESSAGES/. Abre el archivo correspondiente (django.po)
->Editar el fichero poniendo: 	msgid "The two password fields didn't match."
				msgstr "Las dos contraseñas no coinciden."
-> Guardar con: # python manage.py compilemessages
==> No funciona mirar errores (PENDIENTE)
-----15-02-2024---------
-Para usar un servidor web usar guicon para ello instalarlo:# apt install gunicorn
-Añadir en la aplicacion principal del proyecto el fichero wsgi.py
- Para ejecutar y que funcione todo pero no es seguro: python3 manage.py runserver --insecure
-----16-02-2024---------
-Probandolo en el servidor de apache
-> instalo el modulo wsgi: # sudo apt install libapache2-mod-wsgi
	-> si no funciona: # sudo apt-get install libapache2-mod-wsgi-py3
-> lo activo: # sudo a2enmod wsgi
-Creo un fichero en la ruta:/etc/apache2/sites-available/marpaga.conf
	====================
	<VirtualHost *:80>
	    ServerName tu_domino.com
	    DocumentRoot /home/marco/Escritorio/TFG/marpaga_tfg

	    WSGIDaemonProcess marpaga_env python-home=/home/marco/Escritorio/TFG/virtual
	    WSGIProcessGroup marpaga_tfg
	    WSGIScriptAlias / /home/marco/Escritorio/TFG/marpaga_tfg/marpaga/wsgi.py

	    <Directory /home/marco/Escritorio/TFG/marpaga_tfg/marpaga>
		<Files wsgi.py>
		    Require all granted
		</Files>
	    </Directory>

	    Alias /static/ /home/marco/Escritorio/TFG/marpaga_tfg/gestion/
	    <Directory /home/marco/Escritorio/TFG/marpaga_tfg/gestion>
		Require all granted
	    </Directory>

	    #ErrorLog ${APACHE_LOG_DIR}/error.log
	    #CustomLog ${APACHE_LOG_DIR}/access.log combined
	     ErrorLog /home/marco/Escritorio/marpaga_error.log
	     CustomLog /home/marco/Escritorio/marpaga_access.log combined
	</VirtualHost>
	====================
--> ¡Para que funcione todo correctamente hay que mirar bien los permisos! (Pendiente de hacer)
	-----16-02-2024---------
	- Se han gestionado los botones de activación/desactivación de los usuario en redes y contenedores diferentes
	- Mostrar la ip al activar la maquina
	Pendiente de hacer:
	1. Gestionar levantar un docker compose al darle al boton de activar en una red y usuario diferentes (HECHO) REVISAR-> Usar la api docker-compose en vez de una llamada del sistema
	2. Gestionar levantar un docker compose al darle al boton de desactivar en una red y usuario diferentes (HECHO) REVISAR-> Usar la api docker-compose en vez de una llamada del sistema
	3. Que aparezca la ip al lado cuando esté levantado el contenedor (HECHO)
	4 Verificar de manera correcta la estructura de:  (PENDIENTE)
		4.1 Carpeta docker-compose
		4.2 Imagenes docker
		4.3 La estructura de las maquinas virtuales que sea por lo menos una maquina virtual (.ova)
	5. Añadir las flags a las imágenes de docker
	6. Usar una plantilla con {% extends 'base.html' %} para usar solo la base
	7.. Generar una función que se encargue de gestionar la iptables para segmentar la red entre usuarios y el sistema
	-----17-02-2024---------
	-> Poner foto de perfil del usuario:
		a. Que sea accesible unicamente por el usuario su foto
		b. O poner la ruta encriptada y con nombre auxiliar
	-> Se ha cambiado la maquina startrek_payroll para que funcione correctamente cuando se levanta, hay que gestionar la segmentación de red para que sea accesible
		desde la conexón con la VPN (configuración de ip tables)
		-> Información de documentación iptables:
			1. Obtener la ip del cliente: Fichero->sudo cat /var/log/openvpn/status.log tambien esta en /etc/openvpn/ipp.txt
			2. Reglas:
				¡IMPORTANTE!
				====================
				# Bloquear tráfico desde el rango 10.8.0.0/24
				sudo iptables -A FORWARD -s 10.8.0.0/24 -d 172.18.0.4 -j DROP
				# Permitir tráfico desde la IP específica 10.8.0.3
				sudo iptables -A FORWARD -s 10.8.0.3 -d 172.18.0.4 -j ACCEPT
				====================
			3. Para evitar conectividad entre los usuarios:
